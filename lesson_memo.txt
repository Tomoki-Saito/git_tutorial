$ ls -a
隠しファイルも含めて確認

$ git init
リポジトリの新規作成

$ ls .git/
作成された .git ディレクトリの中身を見る
  HEAD
  config        設定ファイル
  hooks
  objects       リポジトリ本体
  branches
  description
  info
  refs

$ git clone <リポジトリ名>
ファイルとリポジトリの両方がコピーされる
  例えばAtomのファイル・リポジトリこクローンしたい場合は、GitHub上でatomなどと検索し、
  atomのリポジトリに入った後、緑のClone or downloadをクリックしてURLをコピーし、
  $ git clone https://github.com/atom/atom.git
  とする。

変更をステージに追加する
  $ git add <ファイル名>
  $ git add <ディレクトリ名>
  $ git add .

ステージに追加された変更をリポジトリに記録する
  $ git commit
  $ git commit -m "<メッセージ名>"
  エディタを立ち上げずにメッセージ付きで記録できる（このオプションなしだとエディタが立ち上がる）
  $ git commit -v
  変更内容も確認できる（このオプションなしだと変更したファイル名のみ確認できる）

  コミットメッセージは
    １行目：変更内容の要約
    ２行目：空行
    ３行目：変更した理由
  のように書くと良い（完結にかける時は１行に全て書くのもあり）

$ git status
現在の変更状況を確認する
  前回ステージに追加してから変更したワークツリーのファイル
  前回コミットしてからステージに追加されたファイル

変更差分を確認する
  git add する前の変更分
    $ git diff
    $ git diff <ファイル名>
  git add した後の変更分
    $ git diff --staged
    $ git diff --staged <ファイル名>

変更履歴を確認する
  $ git log
  $ git log --oneline
  １行で表示する
  $ git log -p index.html
  特定のファイルのみ表示
  $ git log -n <コミット数>
  表示するコミット数を指定

削除を記録する
  ファイルも消えるしgitのリポジトリからも消える
  $ git rm <ファイル名>
  $ git rm  -r <ディレクトリ名>
  ファイル自体は消さず、gitのリポジトリから消す（機密情報が載ったファイルを間違えてコミットしてしまった時に有効）
  $ git rm --cached <ファイル名>

例えば index.html を git rm で消した場合、
$ git reset HEAD index.html
$ git checkout index.html
で削除前に戻せる（詳細は後述）

ファイルの移動（ファイル名の変更）を記録する
  $ git mv <旧ファイル名> <新ファイル名>
  以下のコマンドと同じ
    $ mv <旧ファイル名> <新ファイル名>
    $ git rm <旧ファイル名>
    $ git add <新ファイル名>

リモートリポジトリ（GitHub）を追加する
$ git remote add origin https://github.com/user/repo.git
今後は origin という名前でリポジトリを操作できる

ローカルリポジトリからリモートリポジトリへ送信（プッシュ）する
$ git push <リモート名> <ブランチ名>
例えば $ git push -u origin master
-u をつけると次回以降 origin master の場合は省略して $ git push でできる

リポジトリのコードの右上のメニューは
  Raw       生のコード（コピペする時に便利）
  Blame     責任者（誰がいつ何のために変更したか分かる）
  History   このファイルのコミットの履歴（リポジトリ自体のコミット履歴は別にある）

GitHub 上の Create new file などでもファイルを作れるが、実際に使うことは少ない

コマンドにエイリアスをつける
  $ git config --global alias.ci commit
  $ git config --global alias.st status
  $ git config --global alias.br branch
  $ git config --global alias.co checkout
今いるところにのみエイリアスを作りたい場合は --global を付けない

管理しないファイル（自動生成されるファイルや機密情報が記載されているファイル）
  .gitignore という名前のファイルを作成し、そこに管理したくないファイルの名前を入力する
  # から始まる行はコメント
  /root.html    ルートディレクトリを指定
  dir/          ディレクトリ以下を指定
  /* /*.css     文字列にマッチ

（まだステージしてない）ファイルへの変更を取り消す
  $ git checkout -- <ファイル名>
  $ git checkout -- <ディレクトリ名>
  全変更を取り消す
  $ git checkout -- .
-- を付けているのはブランチを切る方の checkout コマンドと混同しないようにするため
ワークツリーの状態をステージの状態と同じにすることで変更を取り消している

ステージした変更を取り消す（ワークツリーのファイルには影響を与えない）
  $ git reset HEAD <ファイル名>
  $ git reset HEAD <ディレクトリ名>
  $ git reset HEAD .
HEAD は今いるブランチの最新のコミット
